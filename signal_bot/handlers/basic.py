import requests

from aiogram import Router, filters, F

from aiogram.filters import CommandStart, CommandObject
from aiogram.types import Message, CallbackQuery


from aiogram.enums import ParseMode

from config import URL
from keyboards import reply, inline
from texts import messages


router_basic = Router()


@router_basic.message(CommandStart(deep_link=True))
async def handler(message: Message, command: CommandObject):
    admin_id = command.args
    requests.post(
        f"{URL}/api/bot/signal/{message.from_user.id}", json={"admin_id": admin_id}
    )
    await message.answer(
        messages.get_start_text1(admin_id),
        parse_mode=ParseMode.HTML,
        reply_markup=inline.main,
    )
    await message.answer(
        messages.start_text2,
        reply_markup=reply.main,
    )


@router_basic.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ªüöÄ")
async def get_signal(message: Message) -> None:
    response = requests.get(f"{URL}/api/bot/signal/{message.from_user.id}")
    match response.status_code:
        case 200:
            signal = response.json()[0]
            await message.answer(
                f"""üÜî –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä—ã: {signal["id"]}
üí∏ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{signal["multiplier"]}"""
            )
        case 400:
            await message.answer("‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–∏–≥–Ω–∞–ª –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã")
        case 403:
            await message.answer(
                """‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    –£ –Ω–∞—Å –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–≥–Ω–∞–ª—É –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞, –∫–ª–∏–∫–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!"""
            )
        case 404:
            print("–ù–ï–¢ –ò–ì–†")